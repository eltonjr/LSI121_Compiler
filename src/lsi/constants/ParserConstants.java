package lsi.constants;
public interface ParserConstants
{
    int START_SYMBOL = 56;

    int FIRST_NON_TERMINAL    = 56;
    int FIRST_SEMANTIC_ACTION = 89;

    int[][] PARSER_TABLE =
    {
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  0, -1, -1, -1,  0,  0,  0,  0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 19, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 20, 20 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 78, 79, 82, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 80, 81 },
        { -1, -1, 39, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 32, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 33, 39, -1, -1, -1, -1, -1, -1, -1, 34, -1, 35, -1, 36, 39, 37, 38, 39, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 29, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  3, -1, -1, -1,  2,  3,  3,  3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  8,  9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  7, -1, -1, -1, -1, -1,  6,  6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  5, -1, -1, -1, -1,  4,  5,  5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  1, -1, -1, -1,  1,  1,  1,  1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, 48, -1, 48, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 48, 48, 48, 48, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 48, -1, 48, 48 },
        { -1, -1, -1, -1, -1, -1, 57, -1, 57, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 57, 57, 57, 57, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 57, -1, 57, 57 },
        { -1, -1, -1, -1, -1, -1, 70, -1, 71, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 72, 73, 73, 73, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 69, -1, 73, 73 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 12, 13, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, 60, 61, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1, -1, -1, -1 },
        { -1, -1, -1, -1, 66, -1, -1, 67, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 68, -1, -1 },
        { -1, -1, -1, 51, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 53, 52, 54, 55, 56, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, 11, -1, -1, -1, -1, -1, 10, -1, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, 45, -1, -1, -1, -1, -1, 44, -1, -1, -1, -1, 43, -1, 42, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 45, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 45, -1, -1, 45, -1, -1, -1, -1, -1 },
        { -1, -1, 30, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 31, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, 47, -1, 46, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, 59, 59, -1, 58, 58, -1, -1, 59, -1, 59, -1, -1, 59, -1, 59, 59, 59, 59, 59, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 59, -1, -1, -1, -1, -1, -1, -1, -1, 59, -1, 59, -1, 59, -1, -1, 59, 58, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, 18, 18, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, 14, -1, -1, -1, -1, -1, -1, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, 65, 65, 64, 65, 65, 64, -1, 65, -1, 65, -1, -1, 65, -1, 65, 65, 65, 65, 65, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 65, -1, -1, -1, -1, -1, -1, -1, -1, 65, -1, 65, -1, 65, -1, -1, 65, 65, -1, 64, -1, -1 },
        { -1, -1, 50, 49, -1, -1, -1, -1, -1, 50, -1, 50, -1, -1, 50, -1, 49, 49, 49, 49, 49, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 50, -1, -1, -1, -1, -1, -1, -1, -1, 50, -1, 50, -1, 50, -1, -1, 50, -1, -1, -1, -1, -1 },
        { -1, -1, 77, 77, 77, 77, 77, 77, 75, 77, -1, 77, -1, 76, 77, -1, 77, 77, 77, 77, 77, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 77, -1, -1, -1, -1, -1, -1, -1, -1, 77, -1, 77, -1, 77, -1, -1, 77, 77, -1, 77, -1, -1 },
        { -1, -1, 41, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 41, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 41, -1, -1, 40, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, 63, -1, 63, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 63, -1, 63, 63 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, 21, 21, 21, 22, 23, 24, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 25, 26, 27, 28, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 74, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }
    };

    int[][] PRODUCTIONS = 
    {
        { 189,  65,  60,   2 },
        {  61,  64,  63 },
        {  37,  87,  22, 190,   4,  57, 191,   3,  61 },
        {   0 },
        {  38, 192,  69, 193,  11,  86, 194,   3,  64 },
        {   0 },
        {  62,   3,  63 },
        {   0 },
        {  39,  22, 195,  74, 196,   3,  65,  60, 197 },
        {  40,  22, 198,  74, 196,  11,  87, 199,   3,  65,  60, 197 },
        {   9,  70,  10 },
        {   0 },
        {  35, 200,  69, 201,  11,  87, 202,  80 },
        {  36, 203,  69, 201,  11,  87, 202,  80 },
        {   3,  70 },
        {   0 },
        {  22, 204,  79 },
        {  12,  22, 204,  79 },
        {   0 },
        {  22, 205 },
        {  58 },
        {  87 },
        {  30,  57, 206,  13,  57, 207 },
        {  31,  14,  57, 208,  15 },
        {  32,  14,  57, 209,  15,  41,  87, 210 },
        {  26, 211 },
        {  27, 212 },
        {  28, 213 },
        {  29, 214 },
        {  33,  59,  76,  34 },
        {   3,  59,  76 },
        {   0 },
        {  22, 215,  75 },
        {  33,  59,  76,  34 },
        {  42,  66, 216,  43,  59,  84 },
        {  44,  66, 216,  45,  59 },
        {  46,  59,  47,  66, 216 },
        {  48,   9, 217,  69,  10 },
        {  49,   9,  66, 218,  77,  10 },
        {   0 },
        {  50,  59 },
        {   0 },
        { 219,  16,  66, 220 },
        {  14, 221,  66, 222,  15,  16,  66, 220 },
        {   9, 223,  66, 224,  77,  10, 225 },
        { 226 },
        {  12,  66, 227,  77 },
        {   0 },
        {  67, 228,  82 },
        {  73,  67, 229 },
        {   0 },
        {   4, 230 },
        {  18, 231 },
        {  17, 232 },
        {  19, 233 },
        {  20, 234 },
        {  21, 235 },
        {  85, 236,  78 },
        {  71, 237,  85, 238,  78 },
        {   0 },
        {   6, 239 },
        {   7, 240 },
        {  51, 241 },
        {  68, 242,  81 },
        {  72, 243,  68, 244,  81 },
        {   0 },
        {   5, 245 },
        {   8, 246 },
        {  53, 247 },
        {  52, 248,  68, 249 },
        {   7, 250,  68, 251 },
        {   9, 252,  66,  10, 253 },
        {  88, 254 },
        {  58, 255 },
        {  22, 215,  83 },
        {   9, 256,  66, 224,  77,  10, 257 },
        {  14, 221,  66, 258,  15 },
        { 259 },
        {  23, 260 },
        {  24, 261 },
        {  54, 262 },
        {  55, 263 },
        {  25, 264 }
    };

    String[] PARSER_ERROR =
    {
        "",
        "Era esperado fim de programa",
        "Era esperado \".\"",
        "Era esperado \";\"",
        "Era esperado \"=\"",
        "Era esperado \"*\"",
        "Era esperado \"+\"",
        "Era esperado \"-\"",
        "Era esperado \"/\"",
        "Era esperado \"(\"",
        "Era esperado \")\"",
        "Era esperado \":\"",
        "Era esperado \",\"",
        "Era esperado \"..\"",
        "Era esperado \"[\"",
        "Era esperado \"]\"",
        "Era esperado \":=\"",
        "Era esperado \">\"",
        "Era esperado \"<\"",
        "Era esperado \">=\"",
        "Era esperado \"<=\"",
        "Era esperado \"<>\"",
        "Era esperado id",
        "Era esperado num_int",
        "Era esperado num_real",
        "Era esperado literal",
        "Era esperado inteiro",
        "Era esperado real",
        "Era esperado booleano",
        "Era esperado caracter",
        "Era esperado intervalo",
        "Era esperado cadeia",
        "Era esperado vetor",
        "Era esperado inicio",
        "Era esperado fim",
        "Era esperado ref",
        "Era esperado val",
        "Era esperado const",
        "Era esperado decl",
        "Era esperado proc",
        "Era esperado funcao",
        "Era esperado de",
        "Era esperado se",
        "Era esperado entao",
        "Era esperado enquanto",
        "Era esperado faca",
        "Era esperado repita",
        "Era esperado ate",
        "Era esperado leia",
        "Era esperado escreva",
        "Era esperado senao",
        "Era esperado ou",
        "Era esperado nao",
        "Era esperado e",
        "Era esperado falso",
        "Era esperado verdadeiro",
        "<programa> inválido",
        "<constante> inválido",
        "<constante_explicita> inválido",
        "<comando> inválido",
        "<comandos> inválido",
        "<dcl_const> inválido",
        "<dcl_proc> inválido",
        "<dcl_procs> inválido",
        "<dcl_var> inválido",
        "<declaracoes> inválido",
        "<expressao> inválido",
        "<expsimp> inválido",
        "<fator> inválido",
        "<lid> inválido",
        "<listapar> inválido",
        "<op_add> inválido",
        "<op_mult> inválido",
        "<oprel> inválido",
        "<parametros> inválido",
        "<rcomid> inválido",
        "<rep_comando> inválido",
        "<rep_expressao> inválido",
        "<rep_expsimp> inválido",
        "<rep_id> inválido",
        "<rep_listapar> inválido",
        "<rep_termo> inválido",
        "<resto_expressao> inválido",
        "<rvar> inválido",
        "<senaoparte> inválido",
        "<termo> inválido",
        "<tipo> inválido",
        "<tipo_pre_def> inválido",
        "<variavel> inválido"
    };
}
